[tool.poetry]
name = "kinopoisk-dev"
version = "0.2.1"
description = "Реализация Api для сервиса kinopoisk.dev"
authors = ["Your Name <you@example.com>"]
license = "MIT"
readme = "README.md"
repository = 'https://github.com/odi1n/kinopoisk_dev'
documentation = "https://github.com/odi1n/kinopoisk_dev/blob/master/README.md"
keywords = ['kinopoisk', 'kinopoisk api', 'kinopoisk dev', 'kinopoisk dev api', 'api', 'dev']
packages = [{ include = "kinopoisk_dev" }]

[tool.poetry.dependencies]
python = "^3.9"
pydantic = "^1.9.2"
httpx = "^0.23.3"


[tool.poetry.group.dev.dependencies]
pre-commit = "^3.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.autoflake]
check = false
imports = ["fastapi", "requests", "pydantic"]

[tool.black]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''


[tool.isort]
profile = "black"
skip_glob = ["migrations"]
skip = ["migrations"]
known_fastapi = ["fastapi", "pydantic", "pyrogram"]
default_section = "THIRDPARTY"
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]


[tool.ruff]
# Enable Pyflakes `E` and `F` codes by default.
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    #    "I", # isort
    "C", # flake8-comprehensions
    #    "B", # flake8-bugbear
    #    "ERA", # eradicate
    "S" # bandit
]
ignore = [
    "E402", # E402 Module level import not at top of file
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "F405", # F405 `admin` may be undefined, or defined from star imports: `cinema_app.models`
    "S101", # S101 Use of `assert` detected
    "S104", # S104 Possible binding to all interfaces
    #    "E203", # E203: Whitespace before ':' (pycqa/pycodestyle#373)
    #    "SIM106", # SIM106: Handle error-cases first
    "ANN101", # ANN101: Missing type annotation for self in method
    "ANN102", # ANN102: Missing type annotation for cls in classmethod
    #    "PIE781", # PIE781: assign-and-return
    #    "PIE798", # PIE798 no-unnecessary-class: Consider using a module for namespacing instead
] # https://pypi.org/project/ruff/#isort-i

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", ]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = { }

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py39"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
